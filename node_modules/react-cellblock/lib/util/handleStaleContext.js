"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.forceContext = forceContext;
exports.updateObservers = updateObservers;
/*
 * This is a temporary fix for when shouldComponentUpdate()
 * makes the context stale.
 * For reference check out react issue https://github.com/facebook/react/issues/2517
 */
var observerId = 0;
var observers = {};

function forceContext(Component) {
  var componentWillUnmount = Component.prototype.componentWillUnmount;


  Component.prototype.componentDidMount = function () {
    var _this = this;

    // if (componentDidMount) componentDidMount.apply(this, arguments); // nothing uses this at the moment
    if (this.props.isRoot) return;

    this.observerId = observerId++;
    observers[this.observerId] = function (newBreak) {
      /*
       * If the context appears stale
       * force an update
       */
      if (_this.context.cellblockBreak !== newBreak) {
        _this.forceUpdate();
      }
    };
  };

  Component.prototype.componentWillUnmount = function () {
    if (componentWillUnmount) componentWillUnmount.apply(this, arguments);
    delete observers[this.observerId];
  };

  return Component;
}

function updateObservers(newBreakpoint) {
  for (var o in observers) {
    observers[o](newBreakpoint);
  }
}