'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gridFraction = gridFraction;
exports.validBreakpoint = validBreakpoint;
exports.validBreakpoints = validBreakpoints;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FRACTION_RE = /^\d+\/\d+$/;

function gridFraction(props, propName, componentName) {
  var value = props[propName];
  if (props[propName] && !isFraction(value)) {
    return createError(props, propName, componentName, 'expected a fraction string `a/b` (ie: 2/3)');
  }
}

function validBreakpoint(props, propName) {
  if (typeof global.window === 'undefined' && !props[propName]) {
    return new Error('Isomorphic grids require an initialBreakpoint');
  } else if (typeof props[propName] === 'undefined') {
    // don't require a breakpoint
    return null;
  }
  return props.breakpoints && props.breakpoints.includes(props[propName]) ? null : new Error('expected a valid breakpoint');
}

function validBreakpoints(props, propName, componentName) {
  switch (true) {
    case !Array.isArray(props[propName]) || !isAllIntegers(props[propName]):
      return createError(props, propName, componentName, 'expected an array of integers');
    case !isSorted(props[propName]):
      return createError(props, propName, componentName, 'expected ascending order');
  }
}

function createError(props, propName, componentName, message) {
  var str = 'Invalid prop ' + propName + ' of value ' + props[propName] + ' supplied to ' + componentName;
  return new Error(str + ', ' + message);
}

function isString(v) {
  return typeof v === 'string';
}

function isNumber(v) {
  return typeof v === 'number';
}

function isFraction(v) {
  return isString(v) && FRACTION_RE.test(v);
}

function isInteger(v) {
  return isNumber(v) && v % 1 === 0;
}

function isSorted(arr) {
  for (var i = 0; i < arr.length - 1; i += 1) {
    if (arr[i] > arr[i + 1]) return false;
  }
  return true;
}

function isAllIntegers(arr) {
  for (var i = 0; i < arr.length; i += 1) {
    if (!isInteger(arr[i])) return false;
  }
  return true;
}