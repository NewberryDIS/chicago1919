'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Column = require('./Column');

var _Column2 = _interopRequireDefault(_Column);

var _Style = require('./util/Style');

var _Style2 = _interopRequireDefault(_Style);

var _eventlistener = require('eventlistener');

var _eventlistener2 = _interopRequireDefault(_eventlistener);

var _context = require('./util/context');

var _context2 = _interopRequireDefault(_context);

var _getThreshold = require('./util/getThreshold');

var _getThreshold2 = _interopRequireDefault(_getThreshold);

var _validators = require('./util/validators');

var _handleStaleContext = require('./util/handleStaleContext');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * The top level Grid component
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Only used once per page
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


/*
 * A patch:
 * shouldComponentUpdate() can block context updates
 * so we need to add a fallback method for
 * updating interested components.
 * When React offers a better way, this should be removed
 */
var breakCount = 0; // everytime grid changes, increment so we can check for staleness
var gridId = 0; // every grid gets it's own id

var Grid = function (_Component) {
  _inherits(Grid, _Component);

  function Grid(props) {
    _classCallCheck(this, Grid);

    var _this = _possibleConstructorReturn(this, (Grid.__proto__ || Object.getPrototypeOf(Grid)).call(this, props));

    _this.syncGrid = _this.syncGrid.bind(_this);
    _this.updateGrid = _this.updateGrid.bind(_this);
    _this.gridId = gridId++;
    _this._eventListener = Grid._eventListener || _eventlistener2.default;
    _this.state = {
      breakpoint: _this.props.initialBreakpoint
    };
    return _this;
  }

  _createClass(Grid, [{
    key: 'getChildContext',
    value: function getChildContext() {
      var props = this.props;


      var getViewport = function () {
        return [this.state.breakpoint, this.getMaxBreatPoint(this.state.breakpoint)];
      }.bind(this);

      return {
        cellblockGet: function cellblockGet(key) {
          switch (key) {
            case 'gutterWidth':
              return props.gutterWidth;
            case 'columnWidth':
              return props.columnWidth;
            case 'viewport':
              return getViewport();
          }
        }
      };
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      var _props = this.props,
          breakpoints = _props.breakpoints,
          columnWidth = _props.columnWidth,
          gutterWidth = _props.gutterWidth;

      var thresholds = breakpoints.map(function (p) {
        return p * columnWidth + p * gutterWidth;
      });
      var breakpoint = this.state.breakpoint || this.props.breakpoints[(0, _getThreshold2.default)(thresholds)];

      this.setState({
        breakpoint: breakpoint,
        thresholds: thresholds,
        breakCount: 0 });
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.syncGrid(true);
      this._eventListener.add(global.window, 'resize', this.syncGrid);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this._eventListener.remove(global.window, 'resize', this.syncGrid);
    }
  }, {
    key: 'getMaxBreatPoint',
    value: function getMaxBreatPoint(minBreakpoint) {
      var _props2 = this.props,
          breakpoints = _props2.breakpoints,
          flexible = _props2.flexible;


      if (!flexible || Array.isArray(flexible) && flexible.indexOf(minBreakpoint) === -1) {
        return minBreakpoint;
      } else {
        var nextPoint = breakpoints[breakpoints.indexOf(minBreakpoint) + 1];
        return nextPoint || breakpoints[breakpoints.length - 1];
      }
    }
  }, {
    key: 'syncGrid',
    value: function syncGrid(triggerChange) {
      var b = this.props.breakpoints[(0, _getThreshold2.default)(this.state.thresholds)];
      var isChange = b !== this.state.breakpoint;
      if (isChange) this.updateGrid(b);
      if (isChange || triggerChange === true) this.props.onChange(b);
    }
  }, {
    key: 'updateGrid',
    value: function updateGrid(b) {
      breakCount = breakCount += 1; // This is for the patch

      this.setState({
        breakpoint: b,
        breakCount: breakCount // This is for the patch
      });

      (0, _handleStaleContext.updateObservers)(breakCount); // This is for the patch
    }
  }, {
    key: 'render',
    value: function render() {
      var _state = this.state,
          breakpoint = _state.breakpoint,
          breakCount = _state.breakCount;
      var _props3 = this.props,
          _props3$className = _props3.className,
          className = _props3$className === undefined ? '' : _props3$className,
          gutterWidth = _props3.gutterWidth,
          children = _props3.children;

      var gridClass = 'cbg-' + this.gridId;
      var uniqueClass = className + ' ' + gridClass;
      var breakPointRange = [breakpoint, this.getMaxBreatPoint(breakpoint)];
      return _react2.default.createElement(
        _Column2.default,
        { isRoot: true, viewport: breakPointRange, breakCount: breakCount, className: uniqueClass },
        _react2.default.createElement(_Style2.default, { ctx: gridClass, gutter: gutterWidth }),
        children
      );
    }
  }]);

  return Grid;
}(_react.Component);

Grid.childContextTypes = _context2.default;
Grid.propTypes = {
  breakpoints: _validators.validBreakpoints,
  children: _propTypes2.default.any,
  className: _propTypes2.default.string,
  columnWidth: _propTypes2.default.number,
  flexible: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.array]),
  gutterWidth: _propTypes2.default.number,
  initialBreakpoint: _validators.validBreakpoint,
  onChange: _propTypes2.default.func
};
Grid.defaultProps = {
  onChange: function onChange() {},

  columnWidth: 60,
  gutterWidth: 20,
  breakpoints: [4, 8, 12, 16],
  flexible: [4]
};
exports.default = Grid;