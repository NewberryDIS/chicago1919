'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = observeGrid;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _context2 = require('./util/context');

var _context3 = _interopRequireDefault(_context2);

var _handleStaleContext = require('./util/handleStaleContext');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Higher order component
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * allows you to build your responsive components
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


/*
 * A patch:
 * shouldComponentUpdate() can block context updates
 * so we need to add a fallback method for
 * updating interested components.
 * When React offers a better way, this should be removed
 */


// apply patch
function observeGrid(DumbComponent) {
  var _class;

  var Wrapped = (0, _handleStaleContext.forceContext)(_class = function (_Component) {
    _inherits(Wrapped, _Component);

    function Wrapped() {
      _classCallCheck(this, Wrapped);

      return _possibleConstructorReturn(this, (Wrapped.__proto__ || Object.getPrototypeOf(Wrapped)).apply(this, arguments));
    }

    _createClass(Wrapped, [{
      key: 'render',
      value: function render() {
        var _context = this.context,
            cellblockColumn = _context.cellblockColumn,
            cellblockGet = _context.cellblockGet;

        var v = cellblockGet('viewport');
        var c = cellblockGet('columnWidth');
        var g = cellblockGet('gutterWidth');

        return _react2.default.createElement(DumbComponent, _extends({
          breakpoint: v[0],
          colWidth: cellblockColumn.getWidth(v[0], 0),
          colMinPixelWidth: cellblockColumn.getWidth(v[0] * c + v[0] * g - g, g),
          colMaxPixelWidth: cellblockColumn.getWidth(v[1] * c + v[1] * g - g, g)
        }, this.props));
      }
    }]);

    return Wrapped;
  }(_react.Component)) || _class;

  Wrapped.displayName = 'observeGrid(' + (DumbComponent.displayName || DumbComponent.name) + ')';
  Wrapped.contextTypes = _context3.default;
  return Wrapped;
}