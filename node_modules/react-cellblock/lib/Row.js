'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class; /*
             * The Row component
             * Used inside Grid or Inside Column
             * Creates a place to nest Columns
             */


/*
 * A patch:
 * shouldComponentUpdate() can block context updates
 * so we need to add a fallback method for
 * updating interested components.
 * When React offers a better way, this should be removed
 */


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _context2 = require('./util/context');

var _context3 = _interopRequireDefault(_context2);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _constants = require('./util/constants');

var _handleStaleContext = require('./util/handleStaleContext');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// apply patch
var Row = (0, _handleStaleContext.forceContext)(_class = function (_Component) {
  _inherits(Row, _Component);

  function Row() {
    _classCallCheck(this, Row);

    return _possibleConstructorReturn(this, (Row.__proto__ || Object.getPrototypeOf(Row)).apply(this, arguments));
  }

  _createClass(Row, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        cellblock: true
      };
    }
  }, {
    key: 'render',
    value: function render() {
      var _context = this.context,
          cellblock = _context.cellblock,
          cellblockGet = _context.cellblockGet,
          cellblockViewport = _context.cellblockViewport;

      var v = cellblockGet('viewport')[1];
      var c = cellblockGet('columnWidth');
      var g = cellblockGet('gutterWidth');

      var style = cellblock ? null : {
        maxWidth: v * c + v * g
      };

      return _react2.default.createElement(
        'div',
        { className: (0, _classnames2.default)(_constants.ROW, this.props.className), style: style },
        this.props.children
      );
    }
  }]);

  return Row;
}(_react.Component)) || _class;

Row.childContextTypes = _context3.default;
Row.contextTypes = _context3.default;
Row.propTypes = {
  children: _propTypes2.default.any,
  className: _propTypes2.default.string
};
exports.default = Row;