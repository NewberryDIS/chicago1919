'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class; /*
             * The Column component
             * divides Rows into fractions
             */


/*
 * A patch:
 * shouldComponentUpdate() can block context updates
 * so we need to add a fallback method for
 * updating interested components.
 * When React offers a better way, this should be removed
 */


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _validators = require('./util/validators');

var _constants = require('./util/constants');

var _context = require('./util/context');

var _context2 = _interopRequireDefault(_context);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _cellblock = require('cellblock');

var _cellblock2 = _interopRequireDefault(_cellblock);

var _handleStaleContext = require('./util/handleStaleContext');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// apply patch
var Column = (0, _handleStaleContext.forceContext)(_class = function (_Component) {
  _inherits(Column, _Component);

  function Column() {
    _classCallCheck(this, Column);

    return _possibleConstructorReturn(this, (Column.__proto__ || Object.getPrototypeOf(Column)).apply(this, arguments));
  }

  _createClass(Column, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        cellblockColumn: this.grid,
        cellblockBreak: this.props.breakCount || this.context.cellblockBreak
      };
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      var cellblockColumn = this.context.cellblockColumn;


      if (cellblockColumn) {
        this.grid = (0, _cellblock2.default)(cellblockColumn, this.props.width);
      } else {
        this.grid = (0, _cellblock2.default)();
      }
    }
  }, {
    key: 'componentWillUpdate',
    value: function componentWillUpdate(_ref) {
      var width = _ref.width;

      this.grid.setWidth(width);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.grid.detach();
    }
  }, {
    key: 'render',
    value: function render() {
      if (this.props.isRoot) {
        return _react2.default.createElement(
          'div',
          { className: (0, _classnames2.default)(_constants.GRID, this.props.className) },
          this.props.children
        );
      }

      var className = (0, _classnames2.default)(_constants.COL, this.props.className);
      var width = this.grid.getFraction();
      var offset = this.props.offset;

      var style = {};

      if (offset) style.marginLeft = fractionToPercent(offset);
      style.width = decimalToPercent(width[0] / width[1]);

      return _react2.default.createElement(
        'div',
        { className: className, style: style },
        this.props.children
      );
    }
  }]);

  return Column;
}(_react.Component)) || _class;

function fractionToPercent(v) {
  var f = v.split('/');
  return decimalToPercent(parseInt(f[0]) / parseInt(f[1]));
}

function decimalToPercent(v) {
  return parseFloat((v * 100).toFixed(4)) + '%';
}

Column.childContextTypes = _context2.default;
Column.contextTypes = _context2.default;
Column.propTypes = {
  breakCount: _propTypes2.default.number,
  children: _propTypes2.default.any,
  className: _propTypes2.default.string,
  isRoot: _propTypes2.default.bool,
  offset: _validators.gridFraction,
  viewport: _propTypes2.default.array,
  width: _validators.gridFraction
};
exports.default = Column;